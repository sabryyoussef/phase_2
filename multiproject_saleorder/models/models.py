# -*- coding: utf-8 -*-

from odoo import models, fields, api, _


class MultiProjectSaleProductTemplate(models.Model):
    _inherit = 'product.template'

    project_per_line = fields.Boolean(default=True)


class SaleOrderLineProjectPerLine(models.Model):
    _inherit = 'sale.order.line'

    def _can_create_project(sol):
        if not sol.project_id:
            if sol.product_id.project_template_id:
                return (sol.order_id.id, sol.product_id.project_template_id.id) not in map_so_project_templates
            elif sol.order_id.id not in map_so_project:
                return True
        return False

    def _timesheet_create_project(self):
        """ Generate project for the given so line, and link it.
            :param project: record of project.project in which the task should be created
            :return task: record of the created task
        """
        self.ensure_one()
        if self.product_id.project_per_line:
            values = self._timesheet_create_project_prepare_values()
            if self.product_id.project_template_id:
                values['name'] = "%s - %s" % (values['name'], self.product_id.project_template_id.name)
                # The no_create_folder context key is used in documents_project
                project = self.product_id.project_template_id.with_context(no_create_folder=True).copy(values)
                project.tasks.write({
                    'sale_line_id': self.id,
                    'partner_id': self.order_id.partner_id.id,
                    'email_from': self.order_id.partner_id.email,
                })
                # duplicating a project doesn't set the SO on sub-tasks
                project.tasks.filtered('parent_id').write({
                    'sale_line_id': self.id,
                    'sale_order_id': self.order_id.id,
                })
            else:
                project_only_sol_count = self.env['sale.order.line'].search_count([
                    ('order_id', '=', self.order_id.id),
                    ('product_id.service_tracking', 'in', ['project_only', 'task_in_project']),
                ])
                if project_only_sol_count == 1:
                    values['name'] = "%s - [%s] %s" % (values['name'], self.product_id.default_code, self.product_id.name) if self.product_id.default_code else "%s - %s" % (values['name'], self.product_id.name)
                # The no_create_folder context key is used in documents_project
                values['name'] = f"{self.order_id.name} - ({self.product_id.name})"
                project = self.env['project.project'].with_context(no_create_folder=True).create(values)

            # Avoid new tasks to go to 'Undefined Stage'
            if not project.type_ids:
                project.type_ids = self.env['project.task.type'].create({'name': _('New')})
            # link project as generated by current so line
            self.write({'project_id': project.id})
            return project
        else:
            return super(SaleOrderLineProjectPerLine, self)._timesheet_create_project()
